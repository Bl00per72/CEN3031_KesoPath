{"ast":null,"code":"var _jsxFileName = \"C:\\\\SWEProject\\\\my-app\\\\src\\\\frontend\\\\src\\\\Login\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport TextField from '@mui/material/TextField';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport Button from \"@mui/material/Button\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Login() {\n  _s();\n\n  const paperStyle = {\n    padding: 20,\n    height: '70vh',\n    width: 280,\n    margin: \"20px auto\"\n  };\n  const initialValues = {\n    username: '',\n    password: '',\n    remember: false\n  };\n  let navigate = useNavigate();\n  const validationSchema = Yup.object().shape({\n    username: Yup.string().email('please enter valid email').required('Required'),\n    password: Yup.string().required('Required')\n  });\n\n  const onSubmit = (values, props) => {\n    // TODO: make backend call, invalidate user, if credential is right, go back to home page, else show error message\n    setTimeout(() => {\n      props.resetForm();\n      props.setSubmitting(false);\n      navigate(\"/home\");\n    }, 1500);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 10,\n      style: paperStyle,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        align: \"center\",\n        variant: \"h4\",\n        sx: {\n          padding: 2\n        },\n        children: \"Sign in\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: initialValues,\n        onSubmit: onSubmit,\n        validationSchema: validationSchema,\n        children: props => /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Field, {\n            as: TextField,\n            label: \"Username\",\n            name: \"username\",\n            placeholder: \"Enter Username\",\n            variant: \"standard\",\n            fullWidth: true,\n            required: true,\n            helperText: /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              name: \"username\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            as: TextField,\n            label: \"Password\",\n            name: \"password\",\n            placeholder: \"Enter Password\",\n            variant: \"standard\",\n            type: \"password\",\n            fullWidth: true,\n            required: true,\n            helperText: /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              name: \"password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            as: FormControlLabel,\n            name: \"remember\",\n            control: /*#__PURE__*/_jsxDEV(Checkbox, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 83\n            }, this),\n            label: \"Remember me\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            color: \"primary\",\n            variant: \"contained\",\n            disabled: props.isSubmitting,\n            fullWidth: true,\n            children: props.isSubmitting ? \"Loading...\" : \"Sign in\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"center\",\n        sx: {\n          paddingTop: 5,\n          paddingBottom: 1\n        },\n        children: \"Don't have an account?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: () => {\n          navigate(\"/register\");\n        },\n        fullWidth: true,\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Login, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/SWEProject/my-app/src/frontend/src/Login/Login.js"],"names":["React","Typography","Grid","Paper","TextField","FormControlLabel","Checkbox","Button","useNavigate","Formik","Field","Form","ErrorMessage","Yup","Login","paperStyle","padding","height","width","margin","initialValues","username","password","remember","navigate","validationSchema","object","shape","string","email","required","onSubmit","values","props","setTimeout","resetForm","setSubmitting","isSubmitting","paddingTop","paddingBottom"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport TextField from '@mui/material/TextField';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport Button from \"@mui/material/Button\"\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Formik, Field, Form, ErrorMessage} from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\n\r\n\r\n\r\n\r\nexport default function Login() {\r\n    const paperStyle={padding:20, height:'70vh', width:280, margin:\"20px auto\"};\r\n    const initialValues = {\r\n        username: '',\r\n        password: '',\r\n        remember: false\r\n    }\r\n    let navigate = useNavigate();\r\n    const validationSchema = Yup.object().shape({\r\n        username: Yup.string().email('please enter valid email').required('Required'),\r\n        password: Yup.string().required('Required')\r\n    })\r\n    const onSubmit=(values, props) => {\r\n        // TODO: make backend call, invalidate user, if credential is right, go back to home page, else show error message\r\n        setTimeout(() => {\r\n            props.resetForm()\r\n            props.setSubmitting(false)\r\n            navigate(\"/home\")\r\n        }, 1500)\r\n    }\r\n    return (\r\n        <Grid>\r\n            <Paper elevation={10} style={paperStyle}>\r\n                <Typography align=\"center\" variant=\"h4\" sx={{ padding: 2 }}>Sign in</Typography>\r\n                <Formik initialValues={initialValues} onSubmit={onSubmit} validationSchema={validationSchema}>\r\n                    {(props) => (\r\n                        <Form>\r\n                            <Field as={TextField} label=\"Username\" name=\"username\" placeholder=\"Enter Username\" variant=\"standard\" fullWidth required\r\n                            helperText={<ErrorMessage name=\"username\" />}\r\n                            />\r\n                            <Field as={TextField} label=\"Password\" name=\"password\" placeholder=\"Enter Password\" variant=\"standard\" type=\"password\" fullWidth required\r\n                            helperText={<ErrorMessage name=\"password\" />}\r\n                            />\r\n                            <Field as={FormControlLabel} name=\"remember\" control={<Checkbox/>} label=\"Remember me\" />\r\n                            <Button type=\"submit\" color=\"primary\" variant=\"contained\" disabled={props.isSubmitting} fullWidth>{props.isSubmitting?\"Loading...\":\"Sign in\"}</Button>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Typography align=\"center\" sx={{ paddingTop: 5, paddingBottom: 1 }}>Don't have an account?</Typography>\r\n                <Button variant=\"contained\" onClick={\r\n                    () => {\r\n                        navigate(\"/register\");\r\n                    }\r\n                } fullWidth>Register</Button>\r\n            </Paper>\r\n        </Grid>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}